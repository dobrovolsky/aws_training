Resources:
  DynamoDBLog:
    Properties:
      AttributeDefinitions:
        - AttributeName: request_id
          AttributeType: S
      KeySchema:
        - AttributeName: request_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: DynamoDBLog
    Type: AWS::DynamoDB::Table
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - S3:DeleteObject
                Effect: Allow
                Resource: arn:aws:s3:::*
              - Action:
                  - sns:Publish
                Effect: Allow
                Resource: arn:aws:sns:*:*:*
              - Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource: arn:aws:dynamodb:eu-central-1:954489397717:table/*
            Version: '2012-10-17'
          PolicyName: S3Policy
    Type: AWS::IAM::Role
  LambdaProcessing:
    Properties:
      Code:
        S3Bucket: cf-templates-f5lkgopzuq9c-eu-central-1
        S3Key: lambda.zip
      Environment:
        Variables:
          DB_HOST: !GetAtt 'Postgres.Endpoint.Address'
          DB_NAME: !Ref 'DBName'
          DB_PASSWORD: !Ref 'DBPassword'
          DB_PORT: !GetAtt 'Postgres.Endpoint.Port'
          DB_USERNAME: !Ref 'DBUser'
          DYNAMODB_TABLE: !Ref 'DynamoDBLog'
          SNS_TOPIC: !Ref 'SNSTopic'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
    Type: AWS::Lambda::Function
  Postgres:
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      DBName: !Ref 'DBName'
      Engine: postgres
      MasterUserPassword: !Ref 'DBPassword'
      MasterUsername: !Ref 'DBUser'
    Type: AWS::RDS::DBInstance
  S3LambdaPermission:
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref 'LambdaProcessing'
      Principal: s3.amazonaws.com
    Type: AWS::Lambda::Permission
  SNSTopic:
    Type: AWS::SNS::Topic
  SNSTopicSubscription:
    Properties:
      Endpoint: bogdan.gm24@gmail.com
      Protocol: email
      TopicArn: !Ref 'SNSTopic'
    Type: AWS::SNS::Subscription
  UploadedResources:
    DependsOn:
      - LambdaProcessing
    Properties:
      BucketName: uploaded-file-processing-ee5a4c2a-b5a7-4b80-ac22-5763e7a93552
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'LambdaProcessing.Arn'
      VersioningConfiguration:
        Status: Enabled
    Type: AWS::S3::Bucket

